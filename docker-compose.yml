version: '3.8'

x-logging-opts: &x-logging-opts
  logging:
    driver: 'json-file'
    options:
      max-size: '20M'
      max-file: '5'

services:

  # Versioning
  gitea:
    <<: *x-logging-opts
    build:
      context: gitea
      args:
        GITEA_VERSION: ${GITEA_VERSION:-latest}
    container_name: gitea
    environment:
      USER_UID: 1000
      USER_GID: 1000
      SSH_PORT: 2222
      SSH_LISTEN_PORT: 2222
    hostname: gitea
    networks:
      private:
        aliases:
          - gitea.${DOMAIN:-local}
          - gitea
      public:
        aliases:
          - gitea.${DOMAIN:-local}
    ports:
      - '3000:3000/tcp'
      - '2222:2222/tcp'
    volumes:
      - ./_gitea-data:/data:rw
      - ./_gitea-backup:/backup:rw
    restart: unless-stopped
      
  # CD/CI
  drone:
    privileged: true
    <<: *x-logging-opts
    build:
      context: drone
      args:
        DRONE_VERSION: ${DRONE_VERSION:-latest}
    container_name: drone
    environment:
      - DRONE_SERVER_HOST=drone.${DOMAIN:-local}
      - DRONE_SERVER_PROTO=http
      - DRONE_NETWORK=public
      - DRONE_GITEA_SERVER=http://gitea.${DOMAIN:-local}:3000
      - DRONE_GITEA_URL=http://gitea.${DOMAIN:-local}:3000
      - DRONE_GITEA_PRIVATE_MODE=true
      - DRONE_GITEA_SKIP_VERIFY=true
    hostname: drone
    networks:
      private:
        aliases:
          - drone.${DOMAIN:-local}
          - drone
      public:
        aliases:
          - drone.${DOMAIN:-local}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - ./_drone-data:/data:rw
    restart: unless-stopped
    depends_on:
      - gitea
    links:
      - gitea

  # Artifactory
  registry:
    <<: *x-logging-opts
    image: registry:latest
    container_name: registry
    hostname: registry
    networks:
      private:
        aliases:
          - registry.${DOMAIN:-local}
          - registry
    ports:
      - '5000:5000/tcp'
    volumes:
      - ./_registry-data:/data:rw
    restart: unless-stopped

  # Scheduler
  cron:
    <<: *x-logging-opts
    build:
      context: cron
      args:
        UBUNTU_VERSION: ${UBUNTU_VERSION:-latest}
    container_name: cron
    command: crond -f -d 8
    hostname: cron
    networks:
      private:
        aliases:
          - cron.${DOMAIN:-local}
          - cron
    volumes:
      - ./_cron-log:/var/log:rw
    restart: unless-stopped

networks:
  public:
    driver: bridge
    name: denver_public
  private:
    name: denver_private
